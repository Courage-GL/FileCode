前请回顾
1.线程
  多任务编程
  运行过程 占有资源 共享进程资源
  一个进程可包含多个线程
  线程的创建比较容易（相对于进程）

2.创建线程
  Thread() start() join()
  属性 自定义线程类

3.同步互斥
  Event   Lock
  wait()  acquire()
  set()   release()
  clear()
  作用：控制多个线程对共享资源的有序使用
  缺点：影响效率，可能会产生死锁

4.GIL 全局解释器锁
  后果 Python的多线程效率低

  使用情况建议：没阻塞时用进程，高阻塞时用线程


FTP 文件服务器
需求：
【1】 分为服务端和客户端，要求可以有多个客户端同时操作。

【2】 客户端可以查看服务器文件库中有什么文件。

【3】 客户端可以从文件库中下载文件到本地。

【4】 客户端可以上传一个本地文件到文件库。

【5】 使用print在客户端打印命令输入提示，引导操作

    1.文件库可能为空，此时看不了文件库
    2.要下载的文件不存在
    3.上传时文件库有重名的文件
技术点：
    网络：TCP
    并发模型：多进程、多线程

功能划分和封装：
    类封装
    框架搭建 ：函数
    1.查看文件库内容 os.listdir 循环打印
    2.下载文件（单个下载，全部下载）
         文件不存在（1.跳过 2.直接退出）
    3.上传文件 (单个上传，全部上传)
         重名文件 （上传之前先查询原有的文件夹下的文件，有没有重名的 ）（1.覆盖 2.添加后缀上传）
    4.退出
协议设计：
        请求类型  数据参量
    查看 LIST     文件夹路径
    下载 DOWNLOAD 文件夹路径+文件名字
    上传 UPDATE   文件及路径+文件名字
    退出 EXIT

具体功能模块设计：



